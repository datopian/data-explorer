{"version":3,"sources":["../node_modules/tableschema/lib/profiles sync /^/.//.*/.json$","utils/index.js","reducers/rootReducer.js","reducers/widgets.js","reducers/datastoreFilters.js","reducers/datapackage.js","store.js","components/DataView/index.js","utils/loadDataset.js","actions/index.js","App.js","serviceWorker.js","index.js"],"names":["map","./geojson.json","./table-schema.json","./topojson.json","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","deepClone","obj","JSON","parse","stringify","combineReducers","widgets","state","arguments","length","undefined","action","type","stateForChartBuilder","widget","datapackage","views","specType","payload","assign","stateForMapBuilder","datastoreFilters","initialState","DataView","props","react_default","a","createElement","react_loader_default","loaded","loading","style","position","view","dist_App","key","Math","random","toArray","require","parseDatapackageIdentifier","stringOrJSON","loadDataset","_ref","asyncToGenerator","regenerator_default","mark","_callee2","dpID","DP_ID","tabularFormats","dataset","wrap","_context2","prev","next","Dataset","load","sent","Promise","all","resources","_ref2","_callee","file","response","result","rowStream","data","_response","_result","_context","displayName","abrupt","descriptor","path","includes","fetch","ok","unavailable","json","records","format","rows","size","keyed","addSchema","t0","console","warn","toLowerCase","stop","_x2","apply","this","_x","selectTab","res","_objectSpread","datapackageLoad","fetchDataBegin","fetchDataSuccess","connect","App_objectSpread","dispatch","filterUIAction","getState","newResource","updatedDatapackage","loadingWidgets","loadedDataset","datastore_active","compileView","fetchDataAction","_x3","dataViewBuilderAction","actionType","selectTabAction","forEach","index","active","name","useEffect","activeWidget","find","selectedTab","tabLinks","lib","to","className","tabContents","for","chart_builder_dist","map_builder_dist","dist","resource","filterBuilderAction","renderActiveTabContentOnly","handleSelect","Boolean","window","location","hostname","match","instances","document","getElementsByClassName","_step","_iterator","Symbol","iterator","_iteratorNormalCompletion","done","instance","value","getAttribute","widgetNames","table","tabularmap","simple","ReactDOM","render","es","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9226a26d.chunk.js","sourcesContent":["var map = {\n\t\"./geojson.json\": 458,\n\t\"./table-schema.json\": 879,\n\t\"./topojson.json\": 459\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 878;","export const getEmptyView = datapackage => {\n  try {\n    return {resources: [{schema: datapackage.resources[0].schema}]}\n  } catch (e) {\n    return {}\n  }\n}\n\nexport const getDataViewChartBuilderView = (datapackage) => {\n  if (!datapackage) return {}\n\n  const views = datapackage.views || []\n\n  switch (views.length) {\n    case 1:\n      return datapackage.views[0]\n    case 2:\n      return datapackage.views[1]\n    case 3:\n      return datapackage.views[2]\n    default:\n      return getEmptyView(datapackage)\n  }\n}\n\nexport const getDataViewMapBuilderView = (datapackage) => {\n  if (!datapackage) return {}\n\n  const views = datapackage.views || []\n\n  return views.find(view => view.specType === 'tabularmap') || getEmptyView(datapackage)\n}\n\nexport const getResourceForFiltering = (datapackage) => {\n  if (!datapackage) return {}\n  return datapackage.resources[0]\n}\n\nexport const deepClone = obj => {\n  return JSON.parse(JSON.stringify(obj))\n}\n","import { combineReducers } from 'redux'\nimport { default as widgets } from './widgets'\nimport { default as datapackage } from './datapackage'\nimport { default as datastoreFilters } from './datastoreFilters'\n\nexport default combineReducers({\n  widgets, datastoreFilters, datapackage\n})\n","import { deepClone } from '../utils'\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case 'DATA_VIEW_CHART_BUILDER_ACTION':\n      let stateForChartBuilder = deepClone(state)\n      stateForChartBuilder = stateForChartBuilder.map(widget => {\n        if (widget.datapackage.views[0].specType === 'simple') {\n          widget.datapackage.views[0] = action.payload\n        }\n        return widget\n      })\n      return Object.assign(deepClone(state), stateForChartBuilder)\n    case 'DATA_VIEW_MAP_BUILDER_ACTION':\n      let stateForMapBuilder = deepClone(state)\n      stateForMapBuilder = stateForMapBuilder.map(widget => {\n        if (widget.datapackage.views[0].specType === 'tabularmap') {\n          widget.datapackage.views[0] = action.payload\n        }\n        return widget\n      })\n      return Object.assign(deepClone(state), stateForMapBuilder)\n    case 'SELECT_TAB':\n      return action.payload.widgets\n    case 'FETCH_DATA_BEGIN':\n      return action.payload.widgets\n    case 'FETCH_DATA_SUCCESS':\n      return action.payload.widgets\n    case 'FETCH_DATA_FAILURE':\n      return action.payload.widgets\n    default:\n     return state\n  }\n}\n","export default (state = {}, action) => {\n  switch (action.type) {\n   case 'FILTER_UI_ACTION':\n    return state \n   default:\n    return state\n  }\n }\n ","export default (state = {}, action) => {\n  switch (action.type) {\n   case 'DATAPACKAGE_LOAD':\n    return action.payload.datapackage\n   default:\n    return state\n  }\n }\n ","import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers/rootReducer'\n\nconst initialState = {\n  datastoreFilters: {\n    // Datastore specific filters\n  },\n  datapackage: {},\n  widgets: []\n}\n\nexport default function configureStore(props) {\n \n return createStore(\n   rootReducer,\n   Object.assign({}, initialState, props),\n   composeWithDevTools(applyMiddleware(thunk))\n )\n}\n","import React from 'react'\nimport Loader from 'react-loader'\nimport { DataView } from '@datopian/datapackage-views-js'\n\nexport default props => {\n  const views = props.datapackage.views\n\n  return (\n  <Loader loaded={!props.loading} style={{position: \"relative\"}}>\n    <div>\n     {\n        views.map(view => <DataView key={Math.random()} datapackage={{views: [view]}} />)\n     }\n    </div>\n  </Loader>\n  )\n}\n","import { Dataset } from 'data.js'\n\nvar toArray = require('stream-to-array')\n\nfunction parseDatapackageIdentifier(stringOrJSON) {\n  try {\n    return JSON.parse(stringOrJSON)\n  } catch (e) {\n    return stringOrJSON\n  }\n}\n\n// needs to be encapsulated\n// should be library code\nexport default async dpID => {\n  const DP_ID = parseDatapackageIdentifier(dpID)\n  const tabularFormats = ['csv', 'tsv', 'dsv', 'xls', 'xlsx']\n\n  try {\n    const dataset = await Dataset.load(DP_ID)\n\n    // TODO why is this happening here? This looks like library code\n    // TODO clean up! this shouldn't handle mutation of descriptor along\n    //      side of fetching resources etc... a mess\n    await Promise.all(dataset.resources.map(async (file) => {\n      if (file.displayName === 'FileInline') {\n        return\n      } else if (file.descriptor.path && file.descriptor.path.includes('datastore_search')) {\n        // Datastore, e.g., when a path is a 'datastore_search' API\n        const response = await fetch(file.descriptor.path)\n        if (!response.ok) {\n          file.descriptor.unavailable = true\n          return\n        }\n        const result = await response.json()\n        file.descriptor.data = result.result.records\n      } else if (file.displayName === \"FileRemote\" && tabularFormats.includes(file.descriptor.format)) {\n        // Tabular data\n        try {\n          const rowStream = await file.rows({size: 100, keyed: true})\n          const data = await toArray(rowStream)\n          if (data.length > 0) {\n            file.descriptor.data = data // This makes it FileInline\n          } else {\n            file.descriptor.unavailable = true\n          }\n          await file.addSchema()\n        } catch (e) {\n          console.warn(e)\n          file.descriptor.unavailable = true\n        }\n      } else if (file.descriptor.format.toLowerCase().includes('json')) {\n        // Geographical data\n        const response = await fetch(file.descriptor.path)\n        if (!response.ok) {\n          file.descriptor.unavailable = true\n          return\n        }\n        const result = await response.json()\n        // The '.json' files can contain geo data - check by its 'type' property\n        const geoJsonTypes = [\n          'Feature', 'FeatureCollection', 'Point', 'MultiPoint', 'LineString',\n          'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection'\n        ]\n        if (geoJsonTypes.includes(result.type)) {\n          file.descriptor.data = result\n        } else {\n          // It isn't a valid GeoJSON\n          file.descriptor.unavailable = true\n          return\n        }\n      } else if (file.descriptor.format.toLowerCase() === 'pdf') {\n        return\n      } else {\n        // We can't load any other data types for now.\n        file.descriptor.unavailable = true\n      }\n    }))\n\n    return dataset.descriptor\n  } catch (e) {\n    console.warn('Failed to load a Dataset from provided datapackage id\\n' + e)\n    return DP_ID\n  }\n}\n","import loadDataset from '../utils/loadDataset'\nimport { compileView } from 'datapackage-render';\n\nexport const selectTabAction = (payload) => (dispatch, getState) => {\n  const widgets = JSON.parse(JSON.stringify(getState().widgets))\n  widgets.forEach((widget, index) => {\n    widgets[index].active = false\n    if (widget.name === payload) {\n      widgets[index].active = true\n    }\n  })\n  dispatch(selectTab({widgets}))\n}\n\nexport const filterUIAction = (payload) => async (dispatch, getState) => {\n let datapackage = JSON.parse(JSON.stringify(getState().datapackage))\n // For datastore resources, we need to remove loaded `data` attribute to\n // trigger re-fetch of a resource. This is required since we initially fetch\n // only subset of data from datastore, eg, first 100 rows. When user applies\n // filters, we need to hit datastore api and update the data.\n const newResource = JSON.parse(JSON.stringify(payload))\n const updatedDatapackage = Object.assign(datapackage, {resources: [newResource]})\n if (updatedDatapackage.resources[0].datastore_active) {\n   delete updatedDatapackage.resources[0].data\n }\n // Update state.datapackage with new resource path that includes filters (datastore query)\n dispatch(datapackageLoad({datapackage: updatedDatapackage}))\n // Set state of widgets as loading\n const loadingWidgets = JSON.parse(JSON.stringify(getState().widgets))\n    .map(widget => {\n      widget.loading = true\n      return widget\n    })\n  dispatch(fetchDataBegin({widgets: loadingWidgets}))\n  // Load dataset using new path and update state\n  datapackage = JSON.parse(JSON.stringify(getState().datapackage))\n  const loadedDataset = await loadDataset(datapackage)\n  dispatch(datapackageLoad({datapackage: loadedDataset}))\n  // Compile new data into widget views\n  const widgets = JSON.parse(JSON.stringify(getState().widgets))\n    .map(widget => {\n      widget.datapackage.views = widget.datapackage.views\n        .map(view => compileView(view, loadedDataset))\n      widget.loading = false\n      return widget\n    })\n  dispatch(fetchDataSuccess({widgets}))\n}\n\nexport const dataViewBuilderAction = (payload) => dispatch => {\n  let actionType\n  if (payload.specType === 'simple') {\n    actionType = 'DATA_VIEW_CHART_BUILDER_ACTION'\n  } else if (payload.specType === 'tabularmap') {\n    actionType = 'DATA_VIEW_MAP_BUILDER_ACTION'\n  }\n  dispatch({\n    type: actionType,\n    payload\n  })\n}\n\nexport const fetchDataAction = payload => async dispatch => {\n  const loadingWidgets = JSON.parse(JSON.stringify(payload.widgets))\n    .map(widget => {\n      widget.loading = true\n      return widget\n    })\n  dispatch(fetchDataBegin({widgets: loadingWidgets}))\n  const datapackage = JSON.parse(JSON.stringify(payload.datapackage))\n  const loadedDataset = await loadDataset(datapackage)\n  dispatch(datapackageLoad({datapackage: loadedDataset}))\n  const widgets = JSON.parse(JSON.stringify(payload.widgets))\n    .map(widget => {\n      widget.datapackage.views = widget.datapackage.views\n        .map(view => compileView(view, loadedDataset))\n      return widget\n    })\n  dispatch(fetchDataSuccess({widgets}))\n}\n\nconst selectTab = res => ({\n  type: 'SELECT_TAB',\n  payload: { ...res }\n})\n\nconst datapackageLoad = res => ({\n  type: 'DATAPACKAGE_LOAD',\n  payload: { ...res }\n})\n\nconst fetchDataBegin = res => ({\n  type: 'FETCH_DATA_BEGIN',\n  payload: { ...res }\n})\n\nconst fetchDataSuccess = res => ({\n  type: 'FETCH_DATA_SUCCESS',\n  payload: { ...res }\n})\n\nconst fetchDataFailure = err => ({\n  type: 'FETCH_DATA_FAILURE',\n  payload: { err }\n})\n","import React, {useEffect} from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { QueryBuilder } from 'datastore-query-builder';\nimport DataView from './components/DataView';\nimport { ChartBuilder } from 'chart-builder';\nimport { MapBuilder } from 'map-builder';\nimport { Tabs, TabLink, TabContent } from 'react-tabs-redux';\nimport { filterUIAction, fetchDataAction, dataViewBuilderAction, selectTabAction } from './actions/';\nimport { getResourceForFiltering } from './utils';\n\nexport const App = props => {\n  useEffect(() => {\n    const payload = {\n      datapackage: props.datapackage,\n      widgets: props.widgets\n    }\n    props.fetchDataAction(payload)\n  }, [])\n\n  const activeWidget = props.widgets.find(widget => {\n    return widget.active\n  })\n  const selectedTab = activeWidget ? activeWidget.name : props.widgets[0].name\n  const tabLinks = props.widgets.map((widget) => {\n    return <TabLink to={widget.name} className='mr-4'>{widget.name}</TabLink>\n  })\n  const tabContents = props.widgets.map((widget) => {\n    return <TabContent for={widget.name}>\n      <div className=\"container flex py-6\">\n        <div className=\"w-3/4 py-3 mr-4\">\n          <DataView {...widget} />\n        </div>\n        <div className=\"w-1/4\">\n          <div className=\"w-full\">\n            <div className=\"p-4 mr-4\">\n              {\n                widget.datapackage.views[0].specType === 'simple'\n                ? <ChartBuilder view={widget.datapackage.views[0]} dataViewBuilderAction={props.dataViewBuilderAction} />\n                : ''\n              }\n              {\n                widget.datapackage.views[0].specType === 'tabularmap'\n                ? <MapBuilder view={widget.datapackage.views[0]} dataViewBuilderAction={props.dataViewBuilderAction} />\n                : ''\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    </TabContent>\n  })\n\n  return (\n    <div className=\"ml-6\">\n      {/* Data Editor (aka filters / datastore query builder) */}\n      <div className=\"container py-4\">\n        <div className=\"datastore-query-builder\">\n          {\n            props.datapackage.resources[0].datastore_active\n            ? <QueryBuilder resource={getResourceForFiltering(props.datapackage)} filterBuilderAction={props.filterUIAction} />\n            : ''\n          }\n        </div>\n      </div>\n      {/* End of Data Editor */}\n\n      {/* Widgets (aka Views and Controls/Builders) */}\n      <Tabs \n        renderActiveTabContentOnly={true}\n        handleSelect={(selectedTab) => {\n          props.selectTabAction(selectedTab)\n        }}\n        selectedTab={selectedTab}>\n          {tabLinks}\n          {tabContents}\n      </Tabs>\n      {/* End of Widgets */}\n     </div>\n  )\n}\n\nconst mapStateToProps = state => ({\n ...state\n})\n\nconst mapDispatchToProps = dispatch => ({\n filterUIAction: (payload) => dispatch(filterUIAction(payload)),\n fetchDataAction: payload => dispatch(fetchDataAction(payload)),\n dataViewBuilderAction: payload => dispatch(dataViewBuilderAction(payload)),\n selectTabAction: payload => dispatch(selectTabAction(payload))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from './store'\nimport './App.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nfunction parseDatapackageIdentifier(stringOrJSON) {\n  try {\n    return JSON.parse(stringOrJSON)\n  } catch (e) {\n    console.warn(e)\n    return stringOrJSON\n  }\n}\n\nconst instances = document.getElementsByClassName('data-explorer')\n\nfor (const instance of instances) {\n  try {\n    const datapackage = JSON.parse(instance.getAttribute('data-datapackage'))\n\n    const views = JSON.parse(JSON.stringify(datapackage.views))\n    delete datapackage.views\n\n    const widgetNames = {\n      'table': 'Table',\n      'tabularmap': 'Map',\n      'map': 'Map',\n      'simple': 'Chart'\n    }\n\n    const widgets = views.map((view, index) => {\n      return {\n        active: index === 0 ? true : false,\n        name: widgetNames[view.specType],\n        datapackage: {views: [view]}\n      }\n    })\n\n    ReactDOM.render(\n     <Provider store={configureStore({widgets, datapackage})}>\n      <App />\n     </Provider>, document.getElementById(instance.id)\n    )\n  } catch (e) {\n    console.warn('Failed to render data-explorer', e)\n  }\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}